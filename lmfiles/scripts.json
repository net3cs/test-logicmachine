[{"description":"","active":1,"id":1,"type":"resident","params":"10","name":"test","subparams":"0"},{"active":1,"id":2,"type":"event","params":"0\/4\/12","name":"Event for Φαινομένη Ισχύς 3 (VA) (0\/4\/12)"},{"description":"","active":0,"id":3,"type":"resident","params":"3","name":"testos","subparams":"0"},{"description":"","active":0,"id":4,"type":"event","params":"0\/0\/20","name":"test","subparams":"0"},{"type":"userlib","name":"userlib","script":"-- user function library\n\n-- send an e-mail, \nfunction mail(to, subject, message)\n  -- make sure these settings are correct\n  local settings = {\n    -- \"from\" field, only e-mail must be specified here\n    from = 'example@gmail.com',\n    -- smtp username\n    user = 'example@gmail.com',\n    -- smtp password\n    password = 'mypassword',\n    -- smtp server\n    server = 'smtp.gmail.com',\n    -- smtp server port\n    port = 465,\n    -- enable ssl, required for gmail smtp\n    secure = 'sslv23',\n  }\n\n  local smtp = require('socket.smtp')\n  local escape = function(v)\n    return '<' .. tostring(v) .. '>'\n  end\n\n  -- message headers and body\n  settings.source = smtp.message({\n    headers = {\n      to = escape(to),\n      subject = subject,\n    },\n    body = message\n  })\n\n  -- fixup from field\n  settings.from = escape(settings.from)\n  settings.rcpt = { escape(to) }\n\n  return smtp.send(settings)\nend\n\n-- sunrise \/ sunset calculation\nfunction rscalc(latitude, longitude, when)\n  local pi = math.pi\n  local doublepi = pi * 2\n  local rads = pi \/ 180.0\n\n  local TZ = function(when)\n    local ts = os.time(when)\n    local utcdate, localdate = os.date('!*t', ts), os.date('*t', ts)\n    localdate.isdst = false\n    \n    local diff = os.time(localdate) - os.time(utcdate)\n    return math.floor(diff \/ 3600)\n  end\n\n  local range = function(x)\n    local a = x \/ doublepi\n    local b = doublepi * (a - math.floor(a))\n    return b < 0 and (doublepi + b) or b\n  end\n\n  when = when or os.date('*t')\n\n  local y2k = { year = 2000, month = 1, day = 1 }\n  local y2kdays = os.time(when) - os.time(y2k)\n  y2kdays = math.ceil(y2kdays \/ 86400)\n\n  local meanlongitude = range(280.461 * rads + 0.9856474 * rads * y2kdays)\n  local meananomaly = range(357.528 * rads + 0.9856003 * rads * y2kdays)\n  local lambda = range(meanlongitude + 1.915 * rads * math.sin(meananomaly) + rads \/ 50 * math.sin(2 * meananomaly))\n\n  local obliq = 23.439 * rads - y2kdays * rads \/ 2500000\n\n  local alpha = math.atan2(math.cos(obliq) * math.sin(lambda), math.cos(lambda))\n  local declination = math.asin(math.sin(obliq) * math.sin(lambda))\n\n  local LL = meanlongitude - alpha\n  if meanlongitude < pi then\n    LL = LL + doublepi\n  end\n\n  local dfo = pi \/ 216.45\n\n  if latitude < 0 then\n    dfo = -dfo\n  end\n\n  local fo = math.min(math.tan(declination + dfo) * math.tan(latitude * rads), 1)\n  local ha = 12 * math.asin(fo) \/ pi + 6\n\n  local timezone = TZ(when)\n  local equation = 12 + timezone + 24 * (1 - LL \/ doublepi) - longitude \/ 15\n\n  local sunrise, sunset = equation - ha, equation + ha\n\n  if sunrise > 24 then\n    sunrise = sunrise - 24\n  end\n\n  if sunset > 24 then\n    sunset = sunset - 24\n  end\n\n  return math.floor(sunrise * 60), math.ceil(sunset * 60)\nend\n"},{"type":"initscript","name":"initscript","script":"-- init script\n-- this is init script"},{"type":"blockly","name":"blockly","script":""}]